class WeatherAPI {
    constructor() {
        this.apiKey = '–¢–í–û–ô_API_–ö–õ–Æ–ß'; // ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–õ–Æ–ß
    }

    async getWeather(city) {
        try {
            const response = await fetch(
                `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${this.apiKey}&units=metric&lang=ru`
            );
            
            if (!response.ok) {
                if (response.status === 404) {
                    throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
            
            const data = await response.json();
            
            return {
                temp: Math.round(data.main.temp),
                condition: data.weather[0].main,
                description: data.weather[0].description,
                humidity: data.main.humidity,
                wind: data.wind.speed,
                pressure: Math.round(data.main.pressure * 0.75), // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–º —Ä—Ç.—Å—Ç.
                city: data.name,
                country: data.sys.country
            };
            
        } catch (error) {
            console.error('Weather API error:', error);
            throw error;
        }
    }

    getWeatherIcon(condition) {
        const icons = {
            'Clear': '‚òÄÔ∏è',
            'Clouds': '‚òÅÔ∏è',
            'Rain': 'üåßÔ∏è',
            'Snow': '‚ùÑÔ∏è',
            'Thunderstorm': '‚õàÔ∏è',
            'Drizzle': 'üå¶Ô∏è',
            'Mist': 'üå´Ô∏è',
            'Fog': 'üå´Ô∏è'
        };
        return icons[condition] || 'üåà';
    }

    getConditionText(condition) {
        const conditions = {
            'Clear': '–Ø—Å–Ω–æ',
            'Clouds': '–û–±–ª–∞—á–Ω–æ',
            'Rain': '–î–æ–∂–¥—å',
            'Snow': '–°–Ω–µ–≥',
            'Thunderstorm': '–ì—Ä–æ–∑–∞',
            'Drizzle': '–ú–æ—Ä–æ—Å—å',
            'Mist': '–¢—É–º–∞–Ω',
            'Fog': '–¢—É–º–∞–Ω'
        };
        return conditions[condition] || condition;
    }
}

const weatherAPI = new WeatherAPI();

document.getElementById('weather-btn')?.addEventListener('click', getWeather);
document.getElementById('city-input')?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') getWeather();
});

async function getWeather() {
    const input = document.getElementById('city-input');
    const resultsContainer = document.getElementById('weather-results');
    const city = input.value.trim();
    
    if (!city) {
        resultsContainer.innerHTML = '<div class="error">–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</div>';
        return;
    }
    
    resultsContainer.innerHTML = '<div class="loading">–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ...</div>';
    
    try {
        const weather = await weatherAPI.getWeather(city);
        
        const icon = weatherAPI.getWeatherIcon(weather.condition);
        const conditionText = weatherAPI.getConditionText(weather.condition);
        
        resultsContainer.innerHTML = `
            <div class="weather-card">
                <div class="weather-icon">${icon}</div>
                <h2>${weather.city}, ${weather.country}</h2>
                <div class="temperature">${weather.temp}¬∞C</div>
                <p>${conditionText} (${weather.description})</p>
                
                <div class="weather-details">
                    <div class="detail-item">
                        <strong>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å</strong>
                        <p>${weather.humidity}%</p>
                    </div>
                    <div class="detail-item">
                        <strong>üí® –í–µ—Ç–µ—Ä</strong>
                        <p>${weather.wind} –º/—Å</p>
                    </div>
                    <div class="detail-item">
                        <strong>üìä –î–∞–≤–ª–µ–Ω–∏–µ</strong>
                        <p>${weather.pressure} –º–º —Ä—Ç.—Å—Ç.</p>
                    </div>
                </div>
            </div>
        `;
        
    } catch (error) {
        console.error('Weather error:', error);
        resultsContainer.innerHTML = `<div class="error">${error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ'}</div>`;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    const resultsContainer = document.getElementById('weather-results');
    if (resultsContainer && resultsContainer.innerHTML.includes('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')) {
        try {
            const weather = await weatherAPI.getWeather('–ú–æ—Å–∫–≤–∞');
            const icon = weatherAPI.getWeatherIcon(weather.condition);
            const conditionText = weatherAPI.getConditionText(weather.condition);
            
            resultsContainer.innerHTML = `
                <div style="text-align: center; margin-bottom: 1rem; color: #666;">
                    –ü—Ä–∏–º–µ—Ä –ø–æ–≥–æ–¥—ã –¥–ª—è –ú–æ—Å–∫–≤—ã:
                </div>
                <div class="weather-card">
                    <div class="weather-icon">${icon}</div>
                    <h2>${weather.city}, ${weather.country}</h2>
                    <div class="temperature">${weather.temp}¬∞C</div>
                    <p>${conditionText}</p>
                </div>
            `;
        } catch (error) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
    }
});